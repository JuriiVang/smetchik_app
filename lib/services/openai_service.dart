import 'dart:convert';
import 'package:http/http.dart' as http;
import '../secrets.dart'; // –§–∞–π–ª —Å API-–∫–ª—é—á–æ–º

class OpenAIService {
  // üîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–∞
  static Future<String> analyzeDrawing(String imageBase64) async {
    const String apiUrl = "https://api.openai.com/v1/chat/completions";

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Authorization": "Bearer $openAiApiKey",
          "Content-Type": "application/json",
          "OpenAI-Beta": "assistants=v2"
        },
        body: jsonEncode({
          "model": "gpt-4o",
          "messages": [
            {"role": "system", "content": "–¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —á–µ—Ä—Ç–µ–∂–∏."},
            {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —á–µ—Ä—Ç–µ–∂ –∏ –∏–∑–≤–ª–µ–∫–∏ —Ä–∞–∑–º–µ—Ä—ã."}
          ],
          "max_tokens": 300
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data["choices"][0]["message"]["content"];
      } else {
        throw Exception("–û—à–∏–±–∫–∞ OpenAI: ${response.body}");
      }
    } catch (e) {
      return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä—Ç–µ–∂–∞: $e";
    }
  }

  // üìê –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
  static Future<String> analyzeRoom(String assistantId, Map<String, dynamic> roomData) async {
    const String apiUrl = "https://api.openai.com/v1/chat/completions";

    try {
      final response = await http.post(
        Uri.parse(apiUrl),
        headers: {
          "Authorization": "Bearer $openAiApiKey",
          "Content-Type": "application/json",
          "OpenAI-Beta": "assistants=v2"
        },
        body: jsonEncode({
          "model": "gpt-4o",
          "messages": [
            {"role": "system", "content": "–¢—ã —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —Ä–∞–∑–º–µ—Ä—ã –ø–æ–º–µ—â–µ–Ω–∏–π."},
            {"role": "user", "content": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–Ω–∞—Ç—É —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: $roomData"}
          ],
          "max_tokens": 300
        }),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        return data["choices"][0]["message"]["content"];
      } else {
        throw Exception("–û—à–∏–±–∫–∞ OpenAI: ${response.body}");
      }
    } catch (e) {
      return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ–º–Ω–∞—Ç—ã: $e";
    }
  }
}
