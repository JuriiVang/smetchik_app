import 'dart:typed_data';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:flutter/foundation.dart'; // –î–ª—è kIsWeb

class FirebaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseStorage _storage = FirebaseStorage.instance;

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  static Future<Map<String, dynamic>?> getRoomData(String projectId, String buildingId, String roomId) async {
    try {
      var roomSnapshot = await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .get();

      if (roomSnapshot.exists) {
        return roomSnapshot.data();
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã: $e");
    }
    return null;
  }

  // üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç—ã
  static Future<void> saveRoomData(String projectId, String buildingId, String roomId, String roomName, Map<String, dynamic> dimensions) async {
    try {
      await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .set({
        "name": roomName,
        "dimensions": dimensions,
        "updatedAt": FieldValue.serverTimestamp(),
      });

      debugPrint("‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Firestore!");
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: $e");
    }
  }

  // üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã (–µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
  static Future<void> saveRoomDimensions(String projectId, String buildingId, String roomId, Map<String, dynamic> dimensions) async {
    try {
      await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .update({
        "dimensions": dimensions,
        "updatedAt": FieldValue.serverTimestamp(),
      });

      debugPrint("‚úÖ –†–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ Firestore!");
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤: $e");
    }
  }

  // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Firebase Storage
  static Future<String?> uploadImage(Uint8List imageData, String projectId, String roomId) async {
    try {
      final ref = _storage.ref().child('room_images/$projectId/$roomId.png');
      await ref.putData(imageData);
      String downloadUrl = await ref.getDownloadURL();

      // üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ Firestore
      await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('rooms')
          .doc(roomId)
          .update({"imageUrl": downloadUrl});

      debugPrint("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ Firebase Storage: $downloadUrl");
      return downloadUrl;
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e");
      return null;
    }
  }

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
  static Future<String?> getImageUrl(String projectId, String roomId) async {
    try {
      var roomSnapshot = await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('rooms')
          .doc(roomId)
          .get();

      if (roomSnapshot.exists && roomSnapshot.data()?['imageUrl'] != null) {
        return roomSnapshot.data()?['imageUrl'];
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e");
    }
    return null;
  }
}
