import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class DesignScreen extends StatefulWidget {
final String projectId;
final String buildingId;
final String roomId;

const DesignScreen({
super.key,
required this.projectId,
required this.buildingId,
required this.roomId,
});

@override
State<DesignScreen> createState() => _DesignScreenState();
}

class _DesignScreenState extends State<DesignScreen> {
String designDescription = "‚è≥ –ê–Ω–∞–ª–∏–∑ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.";

@override
void initState() {
super.initState();
_analyzeRoom(); // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —ç–∫—Ä–∞–Ω–∞
}

Future<void> _analyzeRoom() async {
try {
var roomSnapshot = await FirebaseFirestore.instance
    .collection('projects')
    .doc(widget.projectId)
    .collection('buildings')
    .doc(widget.buildingId)
    .collection('rooms')
    .doc(widget.roomId)
    .get();

if (!roomSnapshot.exists || roomSnapshot.data() == null) {
if (mounted) {
setState(() {
designDescription = "‚ùå –û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!";
});
}
return;
}

Map<String, dynamic> roomData = roomSnapshot.data() ?? {};

// ‚ùó –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenAI –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É roomData
String analysisResult = "üìä –ê–Ω–∞–ª–∏–∑ –∫–æ–º–Ω–∞—Ç—ã:\n"
"- –®–∏—Ä–∏–Ω–∞: ${roomData['width']} –º\n"
"- –î–ª–∏–Ω–∞: ${roomData['length']} –º\n"
"- –í—ã—Å–æ—Ç–∞: ${roomData['height']} –º\n"
"üîπ –ö–æ–º–Ω–∞—Ç–∞ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—É—é —Ñ–æ—Ä–º—É.";
if (widget.roomId.isEmpty) {
setState(() {
designDescription = "‚ùå –û—à–∏–±–∫–∞: ID –∫–æ–º–Ω–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!";
});
return;
}

if (mounted) {
setState(() {
designDescription = analysisResult;
});
}
} catch (e) {
if (mounted) {
setState(() {
designDescription = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: $e";
});
}
}
}

@override
Widget build(BuildContext context) {
return Scaffold(
appBar: AppBar(title: const Text("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")),
body: Padding(
padding: const EdgeInsets.all(16.0),
child: SingleChildScrollView(
child: Column(
crossAxisAlignment: CrossAxisAlignment.start,
children: [
ElevatedButton.icon(
onPressed: _analyzeRoom,
icon: const Icon(Icons.search),
label: const Text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
),
const SizedBox(height: 20),
Text(
designDescription,
style: const TextStyle(fontSize: 16),
),
],
),
),
),
);
}
}