import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'secrets.dart'; // üîë –§–∞–π–ª —Å API-–∫–ª—é—á–æ–º
import 'firebase_service.dart'; // üìÇ –ß–∏—Ç–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Firebase
import 'openai_assistant.dart'; // ü§ñ OpenAI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç

class DesignScreen extends StatefulWidget {
  final String projectId;
  final String buildingId;
  final String roomId;

  const DesignScreen({
    super.key,
    required this.projectId,
    required this.buildingId,
    required this.roomId,
  });

  @override
  State<DesignScreen> createState() => _DesignScreenState();
}

class _DesignScreenState extends State<DesignScreen> {
  String selectedStyle = "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π";
  String selectedBudget = "–°—Ç–∞–Ω–¥–∞—Ä—Ç";
  String designDescription = "–ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ";
  String? imageBase64; // üñº –•—Ä–∞–Ω–∏–º base64-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  bool isLoading = false; // ‚è≥ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

  Future<void> _generateDesign() async {
    setState(() {
      isLoading = true;
      designDescription = "üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞...";
    });

    debugPrint("üì¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ—â–µ–Ω–∏—è...");
    Map<String, dynamic>? roomData = await FirebaseService.getRoomData(widget.projectId, widget.buildingId, widget.roomId);

    if (roomData != null) {
      debugPrint("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã: $roomData");

      try {
        // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        String result = await OpenAIRequest.askAssistant("–í–ê–®_ID", roomData);

        // üîπ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        String base64Image = await generateImage(selectedStyle);

        // üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—á—ë—Ç—ã –≤ Firebase
        await FirebaseService.saveCalculation(widget.projectId, widget.buildingId, widget.roomId, result, base64Image);

        // üîπ –û–±–Ω–æ–≤–ª—è–µ–º UI
        setState(() {
          designDescription = result;
          imageBase64 = base64Image;
        });
      } catch (e) {
        debugPrint("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ: $e");
        setState(() {
          designDescription = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞.";
        });
      }
    } else {
      setState(() {
        designDescription = "‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!";
      });
    }

    setState(() {
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            const Text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            DropdownButtonFormField<String>(
              value: selectedStyle,
              decoration: const InputDecoration(labelText: "–°—Ç–∏–ª—å"),
              items: ["–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π", "–ö–ª–∞—Å—Å–∏–∫–∞", "–ú–∏–Ω–∏–º–∞–ª–∏–∑–º", "–°—Ç–∞–Ω–¥–∞—Ä—Ç"]
                  .map((style) => DropdownMenuItem(value: style, child: Text(style)))
                  .toList(),
              onChanged: (value) {
                setState(() {
                  selectedStyle = value!;
                });
              },
            ),

            const SizedBox(height: 10),

            const Text("–í—ã–±–µ—Ä–∏—Ç–µ –±—é–¥–∂–µ—Ç:", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            DropdownButton<String>(
              value: selectedBudget,
              items: ["–≠–∫–æ–Ω–æ–º", "–°—Ç–∞–Ω–¥–∞—Ä—Ç", "–ü—Ä–µ–º–∏—É–º"].map((String budget) {
                return DropdownMenuItem(value: budget, child: Text(budget));
              }).toList(),
              onChanged: (String? value) {
                setState(() {
                  selectedBudget = value!;
                });
              },
            ),

            const SizedBox(height: 20),

            ElevatedButton(
              onPressed: _generateDesign,
              child: isLoading ? const CircularProgressIndicator() : const Text("–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç"),
            ),

            const SizedBox(height: 20),

            Expanded(
              child: SingleChildScrollView(
                child: Text(
                  designDescription,
                  style: const TextStyle(fontSize: 16),
                ),
              ),
            ),

            const SizedBox(height: 20),

            if (imageBase64 != null && imageBase64!.isNotEmpty)
              Image.memory(
                base64Decode(imageBase64!),
                fit: BoxFit.cover,
                width: double.infinity,
              )
            else
              const Text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"),
          ],
        ),
      ),
    );
  }
}
