import 'dart:convert';
import 'dart:io';
import 'package:http/http.dart' as http;
import 'package:cloud_firestore/cloud_firestore.dart';
import '../secrets.dart'; // üîë API-–∫–ª—é—á OpenAI
import 'package:flutter/material.dart';

class OpenAIService {
  static const String openAiUrl = "https://api.openai.com/v1/chat/completions";

  /// üìå **–ê–Ω–∞–ª–∏–∑ —á–µ—Ä—Ç–µ–∂–∞ —Å –ø–æ–º–æ—â—å—é OpenAI Vision**
  static Future<Map<String, dynamic>?> analyzeDrawing(File imageFile) async {
    try {
      debugPrint("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ OpenAI Vision...");

      // üìå –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
      String base64Image = base64Encode(await imageFile.readAsBytes());

      // üìå –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      final response = await http.post(
        Uri.parse(openAiUrl),
        headers: {
          "Authorization": "Bearer $openAiApiKey",
          "Content-Type": "application/json",
        },
        body: jsonEncode({
          "model": "gpt-4-turbo",
          "messages": [
            {
              "role": "system",
              "content": "–¢—ã –∏–Ω–∂–µ–Ω–µ—Ä, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—à—å —á–µ—Ä—Ç–µ–∂–∏ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—à—å —Ä–∞–∑–º–µ—Ä—ã."
            },
            {
              "role": "user",
              "content": [
                {"type": "text", "text": "–û–ø—Ä–µ–¥–µ–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã –ø–æ —á–µ—Ä—Ç–µ–∂—É."},
                {
                  "type": "image_url",
                  "image_url": {"url": "data:image/png;base64,$base64Image"}
                }
              ]
            }
          ],
          "max_tokens": 500
        }),
      );

      // üìå –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        String extractedText = data["choices"][0]["message"]["content"];

        debugPrint("‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã: $extractedText");

        // üìå –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Map
        Map<String, dynamic> dimensions = _parseDimensions(extractedText);
        return dimensions;
      } else {
        debugPrint("‚ùå –û—à–∏–±–∫–∞ OpenAI: ${response.body}");
        return null;
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e");
      return null;
    }
  }

  /// üìå **–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤ Firestore**
  static Future<void> saveRoomDimensions(
      String projectId, String buildingId, String roomId, Map<String, dynamic> dimensions) async {
    try {
      await FirebaseFirestore.instance
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .set({
        'width': dimensions['width'],
        'length': dimensions['length'],
        'height': dimensions['height'],
        'area': dimensions['area'],
        'volume': dimensions['volume'],
        'analyzedAt': FieldValue.serverTimestamp(),
      }, SetOptions(merge: true));

      debugPrint("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore");
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Firestore: $e");
    }
  }

  /// üìå **–ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏–∑ OpenAI –≤ Map**
  static Map<String, dynamic> _parseDimensions(String text) {
    final RegExp widthRegex = RegExp(r'–®–∏—Ä–∏–Ω–∞[:=]?\s?([\d.]+)');
    final RegExp lengthRegex = RegExp(r'–î–ª–∏–Ω–∞[:=]?\s?([\d.]+)');
    final RegExp heightRegex = RegExp(r'–í—ã—Å–æ—Ç–∞[:=]?\s?([\d.]+)');
    final RegExp areaRegex = RegExp(r'–ü–ª–æ—â–∞–¥—å[:=]?\s?([\d.]+)');
    final RegExp volumeRegex = RegExp(r'–û–±—ä–µ–º[:=]?\s?([\d.]+)');

    double getValue(RegExp regex) {
      final match = regex.firstMatch(text);
      return match != null ? double.parse(match.group(1)!) : 0.0;
    }

    return {
      'width': getValue(widthRegex),
      'length': getValue(lengthRegex),
      'height': getValue(heightRegex),
      'area': getValue(areaRegex),
      'volume': getValue(volumeRegex),
    };
  }
}
