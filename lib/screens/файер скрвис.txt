import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'dart:io';
import 'package:flutter/foundation.dart'; // –î–ª—è Web –ø–æ–¥–¥–µ—Ä–∂–∫–∏
import 'dart:typed_data';

class FirebaseService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseStorage _storage = FirebaseStorage.instance;

  // üìå –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ Firestore
  static Future<void> saveRoomDimensions(
      String projectId, String buildingId, String roomId, Map<String, dynamic> dimensions) async {
    try {
      await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .update({
        "dimensions": dimensions,
        "updatedAt": FieldValue.serverTimestamp(),
      });

      debugPrint("‚úÖ –†–∞–∑–º–µ—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Firestore!");
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: $e");
    }
  }

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–æ–º–Ω–∞—Ç—ã –∏–∑ Firestore
  static Future<Map<String, dynamic>?> getRoomDimensions(
      String projectId, String buildingId, String roomId) async {
    try {
      var roomSnapshot = await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(buildingId)
          .collection('rooms')
          .doc(roomId)
          .get();

      if (roomSnapshot.exists) {
        return roomSnapshot.data()?['dimensions'];
      } else {
        debugPrint("‚ö†Ô∏è –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ Firestore.");
        return null;
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: $e");
      return null;
    }
  }

  // üìå –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Firebase Storage
  static Future<String?> uploadImage(File image, String projectId, String roomId) async {
    try {
      String fileName = "projects/$projectId/rooms/$roomId/${DateTime.now().millisecondsSinceEpoch}.jpg";
      Reference ref = _storage.ref().child(fileName);

      // üåê –ï—Å–ª–∏ Web, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º File –≤ `Uint8List`
      UploadTask uploadTask;
      if (kIsWeb) {
        Uint8List bytes = await image.readAsBytes();
        uploadTask = ref.putData(bytes);
      } else {
        uploadTask = ref.putFile(image);
      }

      await uploadTask;
      return await ref.getDownloadURL(); // ‚úÖ –ü–æ–ª—É—á–∞–µ–º URL
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e");
      return null;
    }
  }

  // üìå –ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ Firestore
  static Future<String?> getImageUrl(String projectId, String roomId) async {
    try {
      var roomSnapshot = await _firestore
          .collection('projects')
          .doc(projectId)
          .collection('buildings')
          .doc(roomId)
          .get();

      if (roomSnapshot.exists) {
        return roomSnapshot.data()?['imageUrl'];
      } else {
        debugPrint("‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Firestore.");
        return null;
      }
    } catch (e) {
      debugPrint("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: $e");
      return null;
    }
  }
}
