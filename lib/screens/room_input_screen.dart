import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'feature_list_screen.dart'; // –≠–∫—Ä–∞–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ (–æ–∫–æ–Ω, –¥–≤–µ—Ä–µ–π)
import 'package:smetchikapp/screens/design_screen.dart';

class RoomInputScreen extends StatefulWidget {
  final String projectId;
  final String buildingId;
  final String? roomId;

  const RoomInputScreen({
    super.key,
    required this.projectId,
    required this.buildingId,
    this.roomId,
  });

  @override
  RoomInputScreenState createState() => RoomInputScreenState();
}

class RoomInputScreenState extends State<RoomInputScreen> {
  final _formKey = GlobalKey<FormState>();
  final TextEditingController roomNameController = TextEditingController();
  final TextEditingController heightController = TextEditingController();
  final TextEditingController widthController = TextEditingController();
  final TextEditingController lengthController = TextEditingController();
  final TextEditingController windowsController = TextEditingController();

  bool hasWindows = false;
  String? selectedMaterial;

  @override
  void initState() {
    super.initState();
    if (widget.roomId != null) {
      _loadRoomData();
    }
  }

  Future<void> _loadRoomData() async {
    try {
      var roomSnapshot = await FirebaseFirestore.instance
          .collection('projects')
          .doc(widget.projectId)
          .collection('buildings')
          .doc(widget.buildingId)
          .collection('rooms')
          .doc(widget.roomId)
          .get();

      if (roomSnapshot.exists) {
        var roomData = roomSnapshot.data()!;
        setState(() {
          roomNameController.text = roomData['name'] ?? '';
          heightController.text = (roomData['height'] ?? 0).toString();
          widthController.text = (roomData['width'] ?? 0).toString();
          lengthController.text = (roomData['length'] ?? 0).toString();
          windowsController.text = (roomData['windowsCount'] ?? 0).toString();
          selectedMaterial = roomData['material'] ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
          hasWindows = roomData['hasWindows'] ?? false;
        });
      }
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã: $e");
    }
  }

  Future<void> _saveRoomData() async {
    if (!_formKey.currentState!.validate()) return;

    try {
      String roomId = widget.roomId ?? roomNameController.text.toLowerCase().replaceAll(" ", "_");


      await FirebaseFirestore.instance
          .collection('projects')
          .doc(widget.projectId)
          .collection('buildings')
          .doc(widget.buildingId)
          .collection('rooms')
          .doc(roomId)
          .set({
        'name': roomNameController.text.isNotEmpty ? roomNameController.text : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        'height': double.tryParse(heightController.text) ?? 0.0,
        'width': double.tryParse(widthController.text) ?? 0.0,
        'length': double.tryParse(lengthController.text) ?? 0.0,
        'windowsCount': int.tryParse(windowsController.text) ?? 0,
        'hasWindows': hasWindows,
        'material': selectedMaterial ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
        'createdAt': FieldValue.serverTimestamp(),
      });

      if (!mounted) return;

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')),
      );

      Navigator.pop(context);
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã: $e");

      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: $e"),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.roomId == null ? "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É" : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É"),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                TextFormField(
                  controller: roomNameController,
                  decoration: const InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ"),
                  validator: (value) => value!.isEmpty ? "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!" : null,
                ),
                TextFormField(
                  controller: heightController,
                  decoration: const InputDecoration(labelText: "–í—ã—Å–æ—Ç–∞ (–º)"),
                  keyboardType: TextInputType.number,
                ),
                TextFormField(
                  controller: widthController,
                  decoration: const InputDecoration(labelText: "–®–∏—Ä–∏–Ω–∞ (–º)"),
                  keyboardType: TextInputType.number,
                ),
                TextFormField(
                  controller: lengthController,
                  decoration: const InputDecoration(labelText: "–î–ª–∏–Ω–∞ (–º)"),
                  keyboardType: TextInputType.number,
                ),
                TextFormField(
                  controller: windowsController,
                  decoration: const InputDecoration(labelText: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω"),
                  keyboardType: TextInputType.number,
                ),
                CheckboxListTile(
                  title: const Text("–ï—Å—Ç—å –æ–∫–Ω–∞"),
                  value: hasWindows,
                  onChanged: (value) {
                    setState(() {
                      hasWindows = value ?? false;
                    });
                  },
                ),
                DropdownButtonFormField<String>(
                  value: (selectedMaterial != null &&
                      ["–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"]
                          .contains(selectedMaterial))
                      ? selectedMaterial
                      : "–î—Ä—É–≥–æ–µ", // ‚úÖ –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É: –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–∞–≤–∏–º "
                  decoration: const InputDecoration(labelText: "–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω"),
                  items: ["–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"]
                      .map((material) => DropdownMenuItem(
                    value: material,
                    child: Text(material),
                  ))
                      .toList(),
                  onChanged: (value) {
                    setState(() {
                      selectedMaterial = value;
                    });
                  },
                ),

                const SizedBox(height: 20),
                ElevatedButton(
                  onPressed: _saveRoomData,
                  child: Text(widget.roomId == null ? "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
                ),
                const SizedBox(height: 10),

                ElevatedButton(
                  onPressed: () {
                    if (widget.roomId == null) {
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É!"),
                        backgroundColor: Colors.orange,
                      ),
                    );
                    return; // –í—ã—Ö–æ–¥–∏–º –∏–∑ –º–µ—Ç–æ–¥–∞
                    }
                    // ‚úÖ –£–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É DropdownButton
                    if (selectedMaterial == null ||
                        !["–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"]
                            .contains(selectedMaterial)) {
                      selectedMaterial = "–î—Ä—É–≥–æ–µ"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    }
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => FeatureListScreen(
                          projectId: widget.projectId,
                          buildingId: widget.buildingId,
                          roomId: widget.roomId!,
                        ),
                      ),
                    );
                  },
                  child: const Text("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç (–æ–∫–Ω–æ, –¥–≤–µ—Ä—å)"), // üõ† ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ child
                ),
                ElevatedButton(
                  onPressed: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => DesignScreen(
                          projectId: widget.projectId,
                          buildingId: widget.buildingId,
                          roomId: widget.roomId ?? "",
                        ),
                      ),
                    );
                  },
                  child: Text("–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"),
                ),


              ],
            ),
          ),
        ),
      ),
    );
  }
}
