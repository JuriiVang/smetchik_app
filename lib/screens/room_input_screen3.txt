import 'package:flutter/material.dart';
import 'dart:typed_data';
import 'package:image_picker/image_picker.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../services/openai_service.dart';
import '../services/firebase_service.dart';
import 'design_screen.dart';

class RoomInputScreen extends StatefulWidget {
  final String projectId;
  final String buildingId;
  final String? roomId;

  const RoomInputScreen({
    super.key,
    required this.projectId,
    required this.buildingId,
    this.roomId,
  });

  @override
  RoomInputScreenState createState() => RoomInputScreenState();
}

class RoomInputScreenState extends State<RoomInputScreen> {
  final _formKey = GlobalKey<FormState>();

  final TextEditingController roomNameController = TextEditingController();
  final TextEditingController widthController = TextEditingController();
  final TextEditingController lengthController = TextEditingController();
  final TextEditingController heightController = TextEditingController();

  final List<Map<String, TextEditingController>> additionalDimensions = [];
  Uint8List? _imageData;
  String? _imageUrl;
  bool _isLoading = false;
  String _assistantResponse = "–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.";
  final TextEditingController _queryController = TextEditingController();

  @override
  void dispose() {
    roomNameController.dispose();
    widthController.dispose();
    lengthController.dispose();
    heightController.dispose();
    _queryController.dispose();
    for (var dim in additionalDimensions) {
      dim["label"]!.dispose();
      dim["values"]!.dispose();
    }
    super.dispose();
  }

  void _showAssistantDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text("üõ† –ü–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
              controller: _queryController,
              decoration: const InputDecoration(hintText: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å"),
            ),
            const SizedBox(height: 10),
            ElevatedButton(
              onPressed: () async {
                setState(() {
                  _assistantResponse = "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...";
                });
                String response = await OpenAIService.analyzeRoom("roomId_placeholder", {"message": _queryController.text});
                setState(() {
                  _assistantResponse = response;
                });
              },
              child: const Text("üîç –ó–∞–ø—Ä–æ—Å–∏—Ç—å"),
            ),
            const SizedBox(height: 10),
            Text(_assistantResponse),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text("–ó–∞–∫—Ä—ã—Ç—å"),
          ),
        ],
      ),
    );
  }

  Future<void> _saveRoomData() async {
    bool? confirm = await showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
          content: const Text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context, false),
              child: const Text("–û—Ç–º–µ–Ω–∞"),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context, true),
              child: const Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
            ),
          ],
        );
      },
    );
    if (confirm != true) return;

    if (!_formKey.currentState!.validate()) return;

    String roomId = widget.roomId ?? roomNameController.text.toLowerCase().replaceAll(" ", "_");

    List<Map<String, dynamic>> dimensionsArray = [];
    for (var dim in additionalDimensions) {
      List<double> valuesList = dim["values"]!.text
          .split(",")
          .map((e) => double.tryParse(e.trim()) ?? 0.0)
          .where((num) => num > 0)
          .toList();
      dimensionsArray.add({
        "label": dim["label"]!.text,
        "values": valuesList,
      });
    }

    await FirebaseFirestore.instance
        .collection('projects')
        .doc(widget.projectId)
        .collection('buildings')
        .doc(widget.buildingId)
        .collection('rooms')
        .doc(roomId)
        .set({
      'name': roomNameController.text,
      'width': double.tryParse(widthController.text.replaceAll(",", ".")) ?? 0.0,
      'length': double.tryParse(lengthController.text.replaceAll(",", ".")) ?? 0.0,
      'height': double.tryParse(heightController.text.replaceAll(",", ".")) ?? 0.0,
      'additional_dimensions': dimensionsArray,
      'createdAt': FieldValue.serverTimestamp(),
    });

    ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("–í–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–æ–≤")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                TextFormField(controller: roomNameController, decoration: const InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ")),
                TextFormField(controller: widthController, decoration: const InputDecoration(labelText: "–®–∏—Ä–∏–Ω–∞ (–º)"), keyboardType: TextInputType.number),
                TextFormField(controller: lengthController, decoration: const InputDecoration(labelText: "–î–ª–∏–Ω–∞ (–º)"), keyboardType: TextInputType.number),
                TextFormField(controller: heightController, decoration: const InputDecoration(labelText: "–í—ã—Å–æ—Ç–∞ (–º)"), keyboardType: TextInputType.number),
                const SizedBox(height: 20),
                ElevatedButton(onPressed: () => _showAssistantDialog(context), child: const Text("ü§ñ –í—ã–∑–≤–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")),
                const SizedBox(height: 20),
                ElevatedButton(onPressed: _saveRoomData, child: const Text("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
