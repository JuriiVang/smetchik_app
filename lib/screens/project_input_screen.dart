import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class ProjectInputScreen extends StatefulWidget {
  final String? projectId; // –ï—Å–ª–∏ null, –∑–Ω–∞—á–∏—Ç —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç

  const ProjectInputScreen({super.key, this.projectId});

  @override
  ProjectInputScreenState createState() => ProjectInputScreenState();
}

class ProjectInputScreenState extends State<ProjectInputScreen> {
  final _formKey = GlobalKey<FormState>();
  String name = "";
  String location = "";
  String description = "";
  String status = "–í —Ä–∞–±–æ—Ç–µ";

  @override
  void initState() {
    super.initState();
    if (widget.projectId != null) {
      _loadProjectData();
    }
  }

  Future<void> _loadProjectData() async {
    try {
      var doc = await FirebaseFirestore.instance
          .collection('projects')
          .doc(widget.projectId)
          .get();
      if (doc.exists) {
        var data = doc.data()!;
        setState(() {
          name = data['name'] ?? "";
          location = data['location'] ?? "";
          description = data['description'] ?? "";
          status = data['status'] ?? "–í —Ä–∞–±–æ—Ç–µ";
        });
      }
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞: $e");
    }
  }

  Future<void> _saveProject() async {
    if (!_formKey.currentState!.validate()) return;

    var projectRef = FirebaseFirestore.instance.collection('projects');

    try {
      if (widget.projectId == null) {
        // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–≥–∏—á–Ω—ã–π ID –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
        String projectId = name.isNotEmpty
            ? name.replaceAll(" ", "_").toLowerCase()
            : "default_project";

        await projectRef.doc(projectId).set({
          'name': name.isNotEmpty ? name : "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è",
          'location': location,
          'description': description,
          'status': status,
          'createdAt': FieldValue.serverTimestamp(),
        });
      } else {
        // ‚úè –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç
        await projectRef.doc(widget.projectId).update({
          'name': name,
          'location': location,
          'description': description,
          'status': status,
        });
      }

      if (!mounted) return;
      Navigator.pop(context);
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $e");

      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: $e"),
            backgroundColor: Colors.red,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          title: Text(widget.projectId == null
              ? "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
              : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                initialValue: name,
                decoration:
                const InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"),
                onChanged: (value) => setState(() => name = value),
                validator: (value) =>
                value!.isEmpty ? "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!" : null,
              ),
              TextFormField(
                initialValue: location,
                decoration: const InputDecoration(labelText: "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ"),
                onChanged: (value) => setState(() => location = value),
              ),
              TextFormField(
                initialValue: description,
                decoration: const InputDecoration(labelText: "–û–ø–∏—Å–∞–Ω–∏–µ"),
                onChanged: (value) => setState(() => description = value),
              ),
              DropdownButtonFormField<String>(
                value: status,
                decoration: const InputDecoration(labelText: "–°—Ç–∞—Ç—É—Å"),
                items: ["–í —Ä–∞–±–æ—Ç–µ", "–ó–∞–≤–µ—Ä—à—ë–Ω", "–ó–∞–º–æ—Ä–æ–∂–µ–Ω"]
                    .map((e) => DropdownMenuItem(value: e, child: Text(e)))
                    .toList(),
                onChanged: (value) => setState(() => status = value!),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _saveProject,
                child: Text(widget.projectId == null
                    ? "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç"
                    : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
