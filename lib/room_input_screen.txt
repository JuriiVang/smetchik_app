import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class RoomInputScreen extends StatefulWidget {
  final String projectId;
  final String buildingId;
  final String? roomId;

  const RoomInputScreen({
    super.key,
    required this.projectId,
    required this.buildingId,
    this.roomId,
  });

  @override
  RoomInputScreenState createState() => RoomInputScreenState();
}

class RoomInputScreenState extends State<RoomInputScreen> {
  final TextEditingController roomNameController = TextEditingController();
  final TextEditingController heightController = TextEditingController();
  final TextEditingController widthController = TextEditingController();
  final TextEditingController lengthController = TextEditingController();
  final TextEditingController windowsController = TextEditingController();

  bool hasWindows = false;
  String? selectedMaterial;

  @override
  void initState() {
    super.initState();
    if (widget.roomId != null) {
      _loadRoomData();
    }
  }

  Future<void> _loadRoomData() async {
    try {
      DocumentSnapshot roomSnapshot = await FirebaseFirestore.instance
          .collection('projects')
          .doc(widget.projectId)
          .collection('buildings')
          .doc(widget.buildingId)
          .collection('rooms')
          .doc(widget.roomId)
          .get();

      if (roomSnapshot.exists) {
        var roomData = roomSnapshot.data() as Map<String, dynamic>;

        setState(() {
          roomNameController.text = roomData['name'] ?? '';
          heightController.text = (roomData['height'] ?? 0).toString();
          widthController.text = (roomData['width'] ?? 0).toString();
          lengthController.text = (roomData['length'] ?? 0).toString();
          windowsController.text = (roomData['windowsCount'] ?? 0).toString();
          selectedMaterial = roomData['material'] ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
          selectedMaterial = roomData.containsKey('material') ? roomData['material'] : null;
          hasWindows = roomData['hasWindows'] ?? false;
        });
      }
    } catch (e) {
      debugPrint("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–Ω–∞—Ç—ã: $e");
    }
  }

  Future<void> _saveRoom() async {
    if (!mounted) return; // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ async

    String roomId = widget.roomId ??
        FirebaseFirestore.instance
            .collection('projects')
            .doc(widget.projectId)
            .collection('buildings')
            .doc(widget.buildingId)
            .collection('rooms')
            .doc()
            .id;
    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    if (selectedMaterial == null || !["–ì–∏–ø—Å", "–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ"].contains(selectedMaterial)) {
      selectedMaterial = "–ì–∏–ø—Å"; // üõ† –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    await FirebaseFirestore.instance
        .collection('projects')
        .doc(widget.projectId)
        .collection('buildings')
        .doc(widget.buildingId)
        .collection('rooms')
        .doc(roomId)
        .set({
      'name': roomNameController.text.isNotEmpty
          ? roomNameController.text
          : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
      'height': double.tryParse(heightController.text) ?? 0.0,
      'width': double.tryParse(widthController.text) ?? 0.0,
      'length': double.tryParse(lengthController.text) ?? 0.0,
      'windowsCount': int.tryParse(windowsController.text) ?? 0,
      'hasWindows': hasWindows,
      'material': selectedMaterial ?? '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      'createdAt': FieldValue.serverTimestamp(),
    });

   if (!mounted) return;

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (!mounted) return;

    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('‚úÖ –ö–æ–º–Ω–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!')),
    );

    Navigator.pop(context);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
          title: Text(widget.roomId == null
              ? "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É"
              : "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É")),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SingleChildScrollView(
          child: Column(
            children: [
              TextField(
                controller: roomNameController,
                decoration: const InputDecoration(labelText: "–ù–∞–∑–≤–∞–Ω–∏–µ"),
              ),
              TextField(
                controller: heightController,
                decoration: const InputDecoration(labelText: "–í—ã—Å–æ—Ç–∞ (–º)"),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: widthController,
                decoration: const InputDecoration(labelText: "–®–∏—Ä–∏–Ω–∞ (–º)"),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: lengthController,
                decoration: const InputDecoration(labelText: "–î–ª–∏–Ω–∞ (–º)"),
                keyboardType: TextInputType.number,
              ),
              TextField(
                controller: windowsController,
                decoration: const InputDecoration(labelText: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω"),
                keyboardType: TextInputType.number,
              ),
              CheckboxListTile(
                title: const Text("–ï—Å—Ç—å –æ–∫–Ω–∞"),
                value: hasWindows,
                onChanged: (value) {
                  setState(() {
                    hasWindows = value ?? false;
                  });
                },
              ),
              DropdownButtonFormField<String>(
                value: (selectedMaterial != null && ["–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"].contains(selectedMaterial))
                    ? selectedMaterial
                    : "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", // ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ `selectedMaterial` –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ
                decoration: const InputDecoration(labelText: "–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω"),
                items: ["–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–î–µ—Ä–µ–≤–æ", "–î—Ä—É–≥–æ–µ"]
                    .map((material) => DropdownMenuItem(
                  value: material,
                  child: Text(material),
                ))
                    .toList(),
                onChanged: (value) {
                  setState(() {
                    selectedMaterial = value;
                  });
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _saveRoom,
                child: Text(widget.roomId == null
                    ? "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É"
                    : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
